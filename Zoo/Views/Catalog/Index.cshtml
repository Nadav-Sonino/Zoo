@model IEnumerable<Animal>
@{
    ViewData["Title"] = "Catalog";
    var categories = ViewData["Categories"] as List<Category>;
    int? selectedCategoryId = ViewData["SelectedCategoryId"] as int?;
    string searchTerm = ViewData["SearchTerm"] as string ?? string.Empty;
}

<div class="row mb-3">
    <div class="col-sm-8 mb-3 mb-sm-0">
        <form method="get" id="searchForm">
            @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
            {
                <div class="input-group mb-3">
                    <button class="btn btn-outline-primary"  asp-controller="Admin" asp-action="CreateAnimal">Create Animal</button>
                    <input name="searchTerm" type="text" class="form-control" placeholder="Type to search..." value="@ViewData["SearchTerm"]">
                </div>
            }
            else
            {
                <input class="form-control" name="searchTerm" value="@ViewData["SearchTerm"]" placeholder="Type to search..." />
            }
            <!-- Include other parameters to maintain state -->
            <input type="hidden" name="categoryId" value="@ViewData["SelectedCategoryId"]" />
            <input type="hidden" name="page" value="0" />
        </form>
    </div>
    <div class="col-sm-4">

        <form method="get" id="categoryForm">
            <select class="form-select" name="categoryId" onchange="this.form.submit();">
                <option value="0">All Categories</option>
                @foreach (var category in categories!)
                {
                    <option value="@category.CategoryId" selected="@(category.CategoryId == selectedCategoryId ? "selected" : null)">
                        @category.Name
                    </option>
                }
            </select>
            <!-- Include hidden inputs to maintain state -->
            <input type="hidden" name="searchTerm" value="@ViewData["SearchTerm"]" />
            <input type="hidden" name="page" value="0" />
        </form>

    </div>
</div>



@{
    await Html.RenderPartialAsync("_CatalogPaginationPartial");
    await Html.RenderPartialAsync("_AnimalsPartial");
    <br />
    await Html.RenderPartialAsync("_CatalogPaginationPartial");
}